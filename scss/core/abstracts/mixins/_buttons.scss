// Button variants
//
// Easily pump out default styles, as well as :hover, :focus, :active,
// and disabled options for all buttons

@mixin button-variant($background){
  background-color: button-color($background, base);
  color: color-yiq(button-color($background, base));
  border: 2px solid button-color($background, base);

  @if $background == primary {
    box-shadow: 4px 8px 20px rgba(100, 114, 188, 0.28);
  }
  @else if $background == secondary {
    box-shadow: 10px 5px 21px rgba(145, 150, 211, 0.19);
  }
  @else if $background == orange {
    box-shadow: 10px 5px 21px rgba(145, 150, 211, 0.19);
  }

  @include hover {
    background-color: button-color($background, dark);
    color: color-yiq(button-color($background, dark));
    border-color: button-color($background, dark);
  }

  &:focus, 
  &.focus {
    background-color: button-color($background, dark);
    color: color-yiq(button-color($background, dark));
    @include box-shadow(none);
  }

  &.disabled,
  &:disabled {
    background-color: $btn-disabled-background;
    color: $btn-disabled-color;
    border: $input-btn-border-width solid $btn-disabled-background;
  }

  &.active {
    background-color: button-color($background, light);
    color: color-yiq(button-color($background, light));
    border: $input-btn-border-width solid button-color($background, light);
    @include box-shadow(none);
  }
  
}

@mixin button-outline-variant($color) {
  color: button-color($color, base);
  background-color: transparent;
  background-image: none;
  border: 2px solid button-color($color, base);

  @if $color == "primary" {
    color: $btn-outline-primary-color;
    border: 2px solid $btn-outline-primary-color;
  }

  @include hover {
    color: color-yiq(button-color($color, base));
    background-color: button-color($color, base);
    border-color: button-color($color, base); 
  }
  &:not(:disabled):not(.disabled),
  &:not(:disabled):not(.disabled),
  .show > &.dropdown-toggle {
    &:hover {
      // Avoid using mixin so we can pass custom focus shadow properly
      @if $color == "primary" {
        box-shadow: 4px 8px 20px rgba(100, 114, 188, 0.28);
      }
      @if $color == "secondary" {
        box-shadow: 10px 5px 21px rgba(145, 150, 211, 0.19);
      }
    }
  }
  &:focus,
  &.focus {
    color: color-yiq(button-color($color, base));
    background-color: button-color($color, base);
    border-color: button-color($color, base);
  }

  &.disabled,
  &:disabled {
    background: transparent !important;
    border-color: $btn-disabled-background;
    color: $btn-disabled-color;
  }

  &.active {
    background-color: button-color($color, light);
    color: color-yiq(button-color($color, light));
    border-color: button-color($color, light);
    @if $color == "secondary" {
      background-color: button-color($color, base);
      color: color-yiq(button-color($color, base));
      border-color: button-color($color, base);
    }
    @include box-shadow(none);
  }
}


@mixin button-flat-variant($color) {
  color: button-color($color, base);
  background-color: transparent !important;
  box-shadow: none !important;
  &:focus,
  &.focus{
    background-color: transparent !important;
    box-shadow: none !important;
  }
}

// Button sizes
@mixin button-size($padding-y, $padding-x, $font-size, $line-height, $border-radius, $min-width) {
  padding: $padding-y $padding-x;
  font-size: $font-size;
  line-height: $line-height;
  min-width: $min-width;
  // Manually declare to provide an override to the browser default
  @if $enable-rounded {
    border-radius: $border-radius;
  } @else {
    border-radius: 0;
  }
}
